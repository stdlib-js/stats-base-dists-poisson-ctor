{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar entropy = require( '@stdlib/stats-base-dists-poisson-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-poisson-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-poisson-mean' );\nvar median = require( '@stdlib/stats-base-dists-poisson-median' );\nvar mode = require( '@stdlib/stats-base-dists-poisson-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-poisson-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-poisson-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-poisson-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-poisson-cdf' );\nvar logpmf = require( '@stdlib/stats-base-dists-poisson-logpmf' );\nvar mgf = require( '@stdlib/stats-base-dists-poisson-mgf' );\nvar pmf = require( '@stdlib/stats-base-dists-poisson-pmf' );\nvar quantile = require( '@stdlib/stats-base-dists-poisson-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction poissonCDF( x ) {\n\treturn cdf( x, this.lambda );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction poissonLogPMF( x ) {\n\treturn logpmf( x, this.lambda );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction poissonMGF( t ) {\n\treturn mgf( t, this.lambda );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction poissonPMF( x ) {\n\treturn pmf( x, this.lambda );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction poissonQuantile( p ) {\n\treturn quantile( p, this.lambda );\n}\n\n\n// MAIN //\n\n/**\n* Poisson distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [lambda=1.0] - mean parameter\n* @throws {TypeError} `lambda` must be a positive number\n* @returns {Poisson} distribution instance\n*\n* @example\n* var poisson = new Poisson( 1.0 );\n*\n* var y = poisson.cdf( 0.8 );\n* // returns ~0.368\n*\n* var v = poisson.mode;\n* // returns 1.0\n*/\nfunction Poisson() {\n\tvar lambda;\n\tif ( !(this instanceof Poisson) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Poisson();\n\t\t}\n\t\treturn new Poisson( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tlambda = arguments[ 0 ];\n\t\tif ( !isPositive( lambda ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Mean parameter must be a positive number. Value: `%s`.', lambda ) );\n\t\t}\n\t} else {\n\t\tlambda = 1.0;\n\t}\n\tdefineProperty( this, 'lambda', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn lambda;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tlambda = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Poisson distribution differential entropy.\n*\n* @name entropy\n* @memberof Poisson.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.entropy;\n* // returns ~2.087\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'entropy', function get() {\n\treturn entropy( this.lambda );\n});\n\n/**\n* Poisson distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Poisson.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.kurtosis;\n* // returns 0.25\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.lambda );\n});\n\n/**\n* Poisson distribution expected value.\n*\n* @name mean\n* @memberof Poisson.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.mean;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'mean', function get() {\n\treturn mean( this.lambda );\n});\n\n/**\n* Poisson distribution median.\n*\n* @name median\n* @memberof Poisson.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.median;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'median', function get() {\n\treturn median( this.lambda );\n});\n\n/**\n* Poisson distribution mode.\n*\n* @name mode\n* @memberof Poisson.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.mode;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'mode', function get() {\n\treturn mode( this.lambda );\n});\n\n/**\n* Poisson distribution skewness.\n*\n* @name skewness\n* @memberof Poisson.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.skewness;\n* // returns 0.5\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'skewness', function get() {\n\treturn skewness( this.lambda );\n});\n\n/**\n* Poisson distribution standard deviation.\n*\n* @name stdev\n* @memberof Poisson.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.stdev;\n* // returns 2.0\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'stdev', function get() {\n\treturn stdev( this.lambda );\n});\n\n/**\n* Poisson distribution variance.\n*\n* @name variance\n* @memberof Poisson.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var poisson = new Poisson( 4.0 );\n*\n* var v = poisson.variance;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( Poisson.prototype, 'variance', function get() {\n\treturn variance( this.lambda );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Poisson.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var poisson = new Poisson( 2.0 );\n*\n* var v = poisson.cdf( 1.5 );\n* // returns ~0.406\n*/\nsetReadOnly( Poisson.prototype, 'cdf', poissonCDF );\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @name logpmf\n* @memberof Poisson.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var poisson = new Poisson( 2.0 );\n*\n* var v = poisson.logpmf( 2.0 );\n* // returns ~-1.307\n*\n* v = poisson.logpmf( 0.8 );\n* // returns -Infinity\n*/\nsetReadOnly( Poisson.prototype, 'logpmf', poissonLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Poisson.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var poisson = new Poisson( 2.0 );\n*\n* var v = poisson.mgf( 0.5 );\n* // returns ~3.66\n*/\nsetReadOnly( Poisson.prototype, 'mgf', poissonMGF );\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @name pmf\n* @memberof Poisson.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var poisson = new Poisson( 2.0 );\n*\n* var v = poisson.pmf( 2.0 );\n* // returns ~0.271\n*\n* v = poisson.pmf( 0.8 );\n* // returns 0.0\n*/\nsetReadOnly( Poisson.prototype, 'pmf', poissonPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Poisson.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var poisson = new Poisson( 2.0 );\n*\n* var v = poisson.quantile( 0.5 );\n* // returns 2.0\n*/\nsetReadOnly( Poisson.prototype, 'quantile', poissonQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Poisson;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Poisson distribution constructor.\n*\n* @module @stdlib/stats-base-dists-poisson-ctor\n*\n* @example\n* var Poisson = require( '@stdlib/stats-base-dists-poisson-ctor' );\n*\n* var poisson = new Poisson( 1.0 );\n*\n* var y = poisson.cdf( 1.5 );\n* // returns ~0.736\n*\n* var mode = poisson.mode;\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "defineProperty", "setReadOnly", "setReadOnlyAccessor", "isPositive", "entropy", "kurtosis", "mean", "median", "mode", "skewness", "stdev", "variance", "cdf", "logpmf", "mgf", "pmf", "quantile", "format", "poissonCDF", "x", "poissonLogPMF", "poissonMGF", "t", "poissonPMF", "poissonQuantile", "p", "Poisson", "lambda", "value", "main"]
}
